version: '3.8'

services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.17.0}
    container_name: es01-hot
    hostname: es01
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - node.roles=master,data_content,data_hot
      - xpack.ml.enabled=false
      - path.repo=/usr/share/elasticsearch/snapshots
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false 
      #- bootstrap.memory_lock=true
      - xpack.searchable.snapshot.shared_cache.size=0b
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: ${MEM_LIMIT:-1Gb}
    volumes:
      - ./elk/data/hot:/usr/share/elasticsearch/data
      - ./elk/snapshots:/usr/share/elasticsearch/snapshots
    ports:
      - ${ES_PORT:-9200}:9200
    networks:
      - elastic
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null || exit 1
      #test: curl -u elastic:elastic -s -f el01:9200/_cat/health >/dev/null || exit 1      
      #test:     
      #  [
      #    "CMD-SHELL",
      #    "curl -s --user elastic:$$ELASTIC_PASSWORD -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'"
      #  ]
      interval: 30s
      timeout: 10s
      retries: 5
 
  es02:
    depends_on: 
    - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.17.0}
    container_name: es02-warm
    hostname: es02
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - node.roles=master,data_warm
      - path.repo=/usr/share/elasticsearch/snapshots
      - xpack.security.enabled=false
      #- bootstrap.memory_lock=true
      - xpack.searchable.snapshot.shared_cache.size=0b
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: ${MEM_LIMIT:-1Gb}
    volumes:
      - ./elk/data/warm:/usr/share/elasticsearch/data
      - ./elk/snapshots:/usr/share/elasticsearch/snapshots
    networks:
      - elastic
    healthcheck:
      test: curl -f -X GET "localhost:9200/_cluster/health?wait_for_status=green&timeout=1s" >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
 
  es03:
    depends_on: 
    - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.17.0}
    container_name: es03-frozen
    hostname: es03
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - node.roles=master,data_frozen
      - path.repo=/usr/share/elasticsearch/snapshots
      - xpack.security.enabled=false
      #- bootstrap.memory_lock=true
      - xpack.searchable.snapshot.shared_cache.size=2GB
      - xpack.searchable.snapshot.shared_cache.size.max_headroom=-1
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
          soft: 65536
          hard: 65536
    mem_limit: ${MEM_LIMIT:-1Gb}
    volumes:
      - ./elk/data/frozen:/usr/share/elasticsearch/data
      - ./elk/snapshots:/usr/share/elasticsearch/snapshots
    networks:
      - elastic
    healthcheck:
      test: curl -f -X GET "localhost:9200/_cluster/health?wait_for_status=green&timeout=1s" >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    depends_on:
    - es01
    - es02
    - es03
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION:-8.17.0}
    container_name: kibana
    hostname: kibana
    ports:
      - ${KIBANA_PORT:-5601}:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200","http://es02:9200","http://es03:9200"]'
      elasticsearch.hosts:  '["http://es01:9200","http://es02:9200","http://es03:9200"]'
      SERVERNAME: kibana
      ELASTICSEARCH_USERNAME: ${KIBANA_USERNAME:-kibana}
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      xpack.security.enabled: false
    mem_limit: ${MEM_LIMIT:-1Gb}
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash01:
    depends_on:
    - es01
    - kibana
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION:-8.17.0}
    container_name: logstash01
    hostname: logstash01
    user: root
    volumes:
    - ./elk/logstash/data/:/usr/share/logstash/data/
    - ./elk/logstash/ingest_data/:/usr/share/logstash/ingest_data/
    - ./configs/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    - ./configs/logstash.yml:/opt/logstash/config/logstash.yml:Z

    environment:
    - xpack.monitoring.enabled=false
    - xpack.security.enabled=false
    - ELASTIC_USER=${ELASTIC_USER:-elastic}
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - ELASTIC_HOSTS=http://es01:9200
    networks:
      - elastic


  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat01
    hostname: filebeat01    
    user: root
    volumes:
    - ./elk/filebeat/data:/usr/share/filebeat/data
    - ./elk/filebeat/ingest_data/:/usr/share/filebeat/ingest_data/
    - ./configs/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
    - xpack.monitoring.enabled=false
    - ELASTIC_USER=${ELASTIC_USER:-elastic}
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    - ELASTIC_HOSTS=http://es01:9200
    - KIBANA_HOSTS=http://kibana:5601
    - LOGSTASH_HOSTS=http://logstash01:9600
    networks:
      - elastic

  dice:
    image: dice:1.0
    build: ./dice
    container_name: dice
    hostname: dice    
    volumes:
    - ./dice/logs/:/usr/src/app/logs
    environment:
    - ERROR_CHANCE=10
    - LOG_PATH=logs
    - LOG_FILE=dice.log 
    networks:
      - elastic


networks:
  elastic:
    name: elastic
    driver: bridge
    ipam:
      config:
      - subnet: 10.10.0.0/16

